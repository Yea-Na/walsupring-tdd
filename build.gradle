plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
//    id "org.asciidoctor.jvm.convert" version "3.3.2"  //스프링 문서화 툴
    id 'com.epages.restdocs-api-spec' version '0.18.2' //스프링 문서화 기술
    id "org.hidetake.swagger.generator" version "2.19.2"
}

group = 'com.walsupring'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
//    asciidoctorExt
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.commons:commons-lang3'
//    implementation files("libs/automatedAPIDocsUtil-0.0.2.jar")

    swaggerCodegen "io.swagger.codegen.v3:swagger-codegen-cli:3.0.44"
    swaggerUI "org.webjars:swagger-ui:3.52.1"

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'com.mysql:mysql-connector-j'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

//    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "com.epages:restdocs-api-spec-mockmvc:0.18.2"
//    testimplementation 'io.github.goyounha11:automatedAPIDocsUtil:0.0.2'


}

//ext {
//    snippetsDir = file("${buildDir}/generated-snippets")
//}
//
//asciidoctor {
//    dependsOn test
//    configurations 'asciidoctorExt'
//    inputs.dir snippetsDir
//}

openapi3 {
    servers = [{url = "http://localhost:8080"},{url = "http://localhost:8081"}] //서버가 여러 개일 경우 선택가능
    title = "Walsupring API Documentaion"
    description = "월수프링 서버 문서"
    version = "0.0.1"
    format = "json" //스니펫을 자동으로 json으로 변경
}

swaggerSources {
    create("convert") {
        setInputFile(file("$buildDir/api-spec/openapi3.json"))
        code {
            language = "html"
        }
    }
}

tasks.named("generateSwaggerUIConvert") {
    dependsOn('openapi3') // 먼저 실행되는
}

task moveSwaggerFiles(type: Copy) {
    dependsOn("generateSwaggerUIConvert")
    from("$buildDir/swagger-ui-convert")
    into("$buildDir/resources/main/static/docs/")
}

tasks.named('test') {
    useJUnitPlatform()
}

// ElasticBeansTalk    -> PaaS => Platform as a Service
// 정해진 Platform에 나의 Service를 올리는 것

// Saas => Service as a Service
// Service로 다른 Service를 도와주는 것
// ERP => 전사적 자원 관리

//ElasticBeansTalk => 버전에 대한 관리, 로깅,오토스케일링
// 배포 : 기존에 떠있던 spring을 끄고 (15-20초 텀) 새로운 spring을 올림
//무중단 배포 : 기존 떠있던 spring을 끄지 않고 새로운 spring을 먼저 준비 // 과금..ㅠ
//기존서버도 있고 새로운 서버도 있음 => blue
//기존서버는 죽이고 새로운 서버만 남음 ==> green
//blue-green or rolling or 무중단배포

tasks.named('bootJar') {
    dependsOn("moveSwaggerFiles")
    archiveFileName.set("walsupring.jar")
}

tasks.named('resolveMainClassName') {
    dependsOn 'moveSwaggerFiles'
}

tasks.register("zip", Zip.class) {
    dependsOn('bootJar') // 이게 돌아가야 실행 가능한 파일이 됨
    archiveFileName.set("walsupring.zip")

    //.ebextensions
    //.platform
    //procfile
    //jar

    from(".ebextensions") {into(".ebextensions")}
    from(".platform") {into(".platform")}
    from("procfiles/Procfile") {into("")}
    from("build/libs/walsupring.jar") {into("")}


}